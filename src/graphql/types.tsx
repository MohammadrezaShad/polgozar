/* eslint-disable */
/* DO NOT CHANGE THIS FILE MANUALLY, This file is generated automaticly from yarn codegen */
import { gql } from '@apollo/client';
import * as Apollo from '@apollo/client';
export type Maybe<T> = T | null;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: string;
  String: string;
  Boolean: boolean;
  Int: number;
  Float: number;
  /** An ISO 8601-encoded datetime */
  ISO8601DateTime: any;
  Upload: any;
};

export type Address = {
  __typename?: 'Address';
  address: Scalars['String'];
  city?: Maybe<Scalars['String']>;
  country?: Maybe<Scalars['String']>;
  lat: Scalars['Int'];
  lng: Scalars['Int'];
  state?: Maybe<Scalars['String']>;
  zip?: Maybe<Scalars['String']>;
};

export type AddressAttributes = {
  lat: Scalars['Float'];
  lng: Scalars['Float'];
  address: Scalars['String'];
  city?: Maybe<Scalars['String']>;
  country?: Maybe<Scalars['String']>;
  zip?: Maybe<Scalars['String']>;
};

export type Category = {
  __typename?: 'Category';
  coverPhotoUrl?: Maybe<Scalars['String']>;
  description: Scalars['String'];
  groups: Array<Group>;
  id: Scalars['ID'];
  slug: Scalars['String'];
  title: Scalars['String'];
};

export type CategoryAttributes = {
  title?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
  coverPhoto?: Maybe<Scalars['Upload']>;
};

/** Autogenerated input type of CreateEvent */
export type CreateEventInput = {
  attributes: EventAttributes;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};

/** Autogenerated return type of CreateEvent */
export type CreateEventPayload = {
  __typename?: 'CreateEventPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  errors?: Maybe<Array<Scalars['String']>>;
  event?: Maybe<Event>;
};

/** Autogenerated input type of CreateGroup */
export type CreateGroupInput = {
  attributes: GroupAttributes;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};

/** Autogenerated return type of CreateGroup */
export type CreateGroupPayload = {
  __typename?: 'CreateGroupPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  errors?: Maybe<Array<Scalars['String']>>;
  group?: Maybe<Group>;
};

/** Autogenerated input type of CreateUser */
export type CreateUserInput = {
  firstname: Scalars['String'];
  lastname: Scalars['String'];
  email: Scalars['String'];
  password: Scalars['String'];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};

/** Autogenerated return type of CreateUser */
export type CreateUserPayload = {
  __typename?: 'CreateUserPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  token: Scalars['String'];
};

export type Event = {
  __typename?: 'Event';
  address?: Maybe<Address>;
  coverPhotoUrl?: Maybe<Scalars['String']>;
  description: Scalars['String'];
  endTime: Scalars['String'];
  group: Group;
  id: Scalars['ID'];
  photos?: Maybe<Array<Photo>>;
  startTime: Scalars['String'];
  title: Scalars['String'];
};

export type EventAttributes = {
  title?: Maybe<Scalars['String']>;
  startTime?: Maybe<Scalars['ISO8601DateTime']>;
  endTime?: Maybe<Scalars['ISO8601DateTime']>;
  description?: Maybe<Scalars['String']>;
  coverPhoto?: Maybe<Scalars['Upload']>;
  photos?: Maybe<Array<Scalars['Upload']>>;
  address?: Maybe<AddressAttributes>;
  groupId?: Maybe<Scalars['String']>;
};

export type Group = {
  __typename?: 'Group';
  address?: Maybe<Address>;
  categories: Array<Category>;
  coverPhotoUrl?: Maybe<Scalars['String']>;
  description: Scalars['String'];
  events: Array<Event>;
  id: Scalars['ID'];
  members: Array<User>;
  name: Scalars['String'];
  organizers?: Maybe<Array<User>>;
  slug: Scalars['String'];
  status: Scalars['String'];
};

export type GroupAttributes = {
  name?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
  coverPhoto?: Maybe<Scalars['Upload']>;
  address?: Maybe<AddressAttributes>;
  categoryIds?: Maybe<Array<Scalars['String']>>;
};


/** Autogenerated input type of JoinGroup */
export type JoinGroupInput = {
  groupId?: Maybe<Scalars['String']>;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};

/** Autogenerated return type of JoinGroup */
export type JoinGroupPayload = {
  __typename?: 'JoinGroupPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  errors?: Maybe<Array<Scalars['String']>>;
  user?: Maybe<User>;
};

/** Autogenerated input type of LeaveGroup */
export type LeaveGroupInput = {
  groupId?: Maybe<Scalars['String']>;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};

/** Autogenerated return type of LeaveGroup */
export type LeaveGroupPayload = {
  __typename?: 'LeaveGroupPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  errors?: Maybe<Array<Scalars['String']>>;
  user?: Maybe<User>;
};

export type Mutation = {
  __typename?: 'Mutation';
  createEvent?: Maybe<CreateEventPayload>;
  createGroup?: Maybe<CreateGroupPayload>;
  createUser?: Maybe<CreateUserPayload>;
  joinGroup?: Maybe<JoinGroupPayload>;
  leaveGroup?: Maybe<LeaveGroupPayload>;
  removeEvent?: Maybe<RemoveEventPayload>;
  removeEventPhoto?: Maybe<RemoveEventPhotoPayload>;
  removeGroup?: Maybe<RemoveGroupPayload>;
  updateCategory?: Maybe<UpdateCategoryPayload>;
  updateEvent?: Maybe<UpdateEventPayload>;
  updateGroup?: Maybe<UpdateGroupPayload>;
  updateGroupStatus?: Maybe<UpdateGroupStatusPayload>;
  updateProfile?: Maybe<UpdateProfilePayload>;
  updateUserStatus?: Maybe<UpdateUserStatusPayload>;
};


export type MutationCreateEventArgs = {
  input: CreateEventInput;
};


export type MutationCreateGroupArgs = {
  input: CreateGroupInput;
};


export type MutationCreateUserArgs = {
  input: CreateUserInput;
};


export type MutationJoinGroupArgs = {
  input: JoinGroupInput;
};


export type MutationLeaveGroupArgs = {
  input: LeaveGroupInput;
};


export type MutationRemoveEventArgs = {
  input: RemoveEventInput;
};


export type MutationRemoveEventPhotoArgs = {
  input: RemoveEventPhotoInput;
};


export type MutationRemoveGroupArgs = {
  input: RemoveGroupInput;
};


export type MutationUpdateCategoryArgs = {
  input: UpdateCategoryInput;
};


export type MutationUpdateEventArgs = {
  input: UpdateEventInput;
};


export type MutationUpdateGroupArgs = {
  input: UpdateGroupInput;
};


export type MutationUpdateGroupStatusArgs = {
  input: UpdateGroupStatusInput;
};


export type MutationUpdateProfileArgs = {
  input: UpdateProfileInput;
};


export type MutationUpdateUserStatusArgs = {
  input: UpdateUserStatusInput;
};

export type OffsetAttributes = {
  limit: Scalars['Int'];
  offset: Scalars['Int'];
};

export type Photo = {
  __typename?: 'Photo';
  id: Scalars['ID'];
  url: Scalars['String'];
};

export type Query = {
  __typename?: 'Query';
  categories: Array<Category>;
  category?: Maybe<Category>;
  event?: Maybe<Event>;
  events: Array<Event>;
  group?: Maybe<Group>;
  groups: Array<Group>;
  loggedInState: Scalars['Boolean'];
  loginModalVisible: Scalars['Boolean'];
  myAccount?: Maybe<User>;
  signupModalVisible: Scalars['Boolean'];
  user?: Maybe<User>;
  userRole: Scalars['String'];
  users: Array<User>;
};


export type QueryCategoryArgs = {
  slug?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['ID']>;
};


export type QueryEventArgs = {
  id?: Maybe<Scalars['ID']>;
};


export type QueryEventsArgs = {
  offsetParams?: Maybe<OffsetAttributes>;
};


export type QueryGroupArgs = {
  slug?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['ID']>;
};


export type QueryGroupsArgs = {
  offsetParams?: Maybe<OffsetAttributes>;
};


export type QueryUserArgs = {
  id: Scalars['ID'];
};


export type QueryUsersArgs = {
  offsetParams?: Maybe<OffsetAttributes>;
};

/** Autogenerated input type of RemoveEvent */
export type RemoveEventInput = {
  id: Scalars['ID'];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};

/** Autogenerated return type of RemoveEvent */
export type RemoveEventPayload = {
  __typename?: 'RemoveEventPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  errors?: Maybe<Array<Scalars['String']>>;
  event?: Maybe<Event>;
};

/** Autogenerated input type of RemoveEventPhoto */
export type RemoveEventPhotoInput = {
  eventId: Scalars['String'];
  photoId: Scalars['String'];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};

/** Autogenerated return type of RemoveEventPhoto */
export type RemoveEventPhotoPayload = {
  __typename?: 'RemoveEventPhotoPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  errors?: Maybe<Array<Scalars['String']>>;
  event?: Maybe<Event>;
};

/** Autogenerated input type of RemoveGroup */
export type RemoveGroupInput = {
  id: Scalars['ID'];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};

/** Autogenerated return type of RemoveGroup */
export type RemoveGroupPayload = {
  __typename?: 'RemoveGroupPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  errors?: Maybe<Array<Scalars['String']>>;
  group?: Maybe<Group>;
};

/** Autogenerated input type of UpdateCategory */
export type UpdateCategoryInput = {
  attributes: CategoryAttributes;
  categoryId: Scalars['String'];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};

/** Autogenerated return type of UpdateCategory */
export type UpdateCategoryPayload = {
  __typename?: 'UpdateCategoryPayload';
  category?: Maybe<Category>;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  errors?: Maybe<Array<Scalars['String']>>;
};

/** Autogenerated input type of UpdateEvent */
export type UpdateEventInput = {
  attributes: EventAttributes;
  eventId: Scalars['String'];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};

/** Autogenerated return type of UpdateEvent */
export type UpdateEventPayload = {
  __typename?: 'UpdateEventPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  errors?: Maybe<Array<Scalars['String']>>;
  event?: Maybe<Event>;
};

/** Autogenerated input type of UpdateGroup */
export type UpdateGroupInput = {
  attributes: GroupAttributes;
  groupId: Scalars['String'];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};

/** Autogenerated return type of UpdateGroup */
export type UpdateGroupPayload = {
  __typename?: 'UpdateGroupPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  errors?: Maybe<Array<Scalars['String']>>;
  group?: Maybe<Group>;
};

/** Autogenerated input type of UpdateGroupStatus */
export type UpdateGroupStatusInput = {
  groupId: Scalars['String'];
  status: Scalars['String'];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};

/** Autogenerated return type of UpdateGroupStatus */
export type UpdateGroupStatusPayload = {
  __typename?: 'UpdateGroupStatusPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  errors?: Maybe<Array<Scalars['String']>>;
  group?: Maybe<Group>;
};

/** Autogenerated input type of UpdateProfile */
export type UpdateProfileInput = {
  firstname?: Maybe<Scalars['String']>;
  lastname?: Maybe<Scalars['String']>;
  groupIds?: Maybe<Array<Scalars['String']>>;
  categoryIds?: Maybe<Array<Scalars['String']>>;
  address?: Maybe<AddressAttributes>;
  avatar?: Maybe<Scalars['Upload']>;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};

/** Autogenerated return type of UpdateProfile */
export type UpdateProfilePayload = {
  __typename?: 'UpdateProfilePayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  errors?: Maybe<Array<Scalars['String']>>;
  user?: Maybe<User>;
};

/** Autogenerated input type of UpdateUserStatus */
export type UpdateUserStatusInput = {
  userId: Scalars['String'];
  status: Scalars['String'];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};

/** Autogenerated return type of UpdateUserStatus */
export type UpdateUserStatusPayload = {
  __typename?: 'UpdateUserStatusPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  errors?: Maybe<Array<Scalars['String']>>;
  user?: Maybe<User>;
};


export type User = {
  __typename?: 'User';
  address?: Maybe<Address>;
  avatarUrl?: Maybe<Scalars['String']>;
  categories?: Maybe<Array<Category>>;
  email?: Maybe<Scalars['String']>;
  firstname: Scalars['String'];
  groups?: Maybe<Array<Group>>;
  id: Scalars['ID'];
  lastname: Scalars['String'];
  ledGroups?: Maybe<Array<Group>>;
  name: Scalars['String'];
  role?: Maybe<Scalars['String']>;
  status: Scalars['String'];
};

export type BasicCategoryInfoFragment = (
  { __typename?: 'Category' }
  & Pick<Category, 'title' | 'description'>
);

export type GetAllCategoriesQueryVariables = Exact<{ [key: string]: never; }>;


export type GetAllCategoriesQuery = (
  { __typename?: 'Query' }
  & { categories: Array<(
    { __typename?: 'Category' }
    & Pick<Category, 'id' | 'slug' | 'coverPhotoUrl'>
    & BasicCategoryInfoFragment
  )> }
);

export type BasicAddressFragment = (
  { __typename?: 'Address' }
  & Pick<Address, 'lat' | 'lng' | 'city' | 'address'>
);

export type FullAddressFragment = (
  { __typename?: 'Address' }
  & Pick<Address, 'country' | 'state' | 'zip'>
  & BasicAddressFragment
);

export type BasicGroupDetailsFragment = (
  { __typename?: 'Group' }
  & Pick<Group, 'id' | 'name' | 'slug'>
);

export type BasicEventDetailsFragment = (
  { __typename?: 'Event' }
  & Pick<Event, 'id' | 'title' | 'coverPhotoUrl' | 'startTime' | 'endTime'>
  & { address?: Maybe<(
    { __typename?: 'Address' }
    & BasicAddressFragment
  )>, group: (
    { __typename?: 'Group' }
    & BasicGroupDetailsFragment
  ) }
);

export type GetAllEventsQueryVariables = Exact<{ [key: string]: never; }>;


export type GetAllEventsQuery = (
  { __typename?: 'Query' }
  & { events: Array<(
    { __typename?: 'Event' }
    & BasicEventDetailsFragment
  )> }
);

export type GetEventByIdQueryVariables = Exact<{
  id?: Maybe<Scalars['ID']>;
}>;


export type GetEventByIdQuery = (
  { __typename?: 'Query' }
  & { event?: Maybe<(
    { __typename?: 'Event' }
    & Pick<Event, 'description'>
    & { photos?: Maybe<Array<(
      { __typename?: 'Photo' }
      & Pick<Photo, 'id' | 'url'>
    )>> }
    & BasicEventDetailsFragment
  )> }
);

export type GroupCardInfoFragment = (
  { __typename?: 'Group' }
  & Pick<Group, 'coverPhotoUrl' | 'status'>
  & { members: Array<(
    { __typename?: 'User' }
    & BasicProfileFragment
  )>, address?: Maybe<(
    { __typename?: 'Address' }
    & BasicAddressFragment
  )>, categories: Array<(
    { __typename?: 'Category' }
    & BasicCategoryInfoFragment
  )> }
  & BasicGroupDetailsFragment
);

export type GetAllGroupsQueryVariables = Exact<{ [key: string]: never; }>;


export type GetAllGroupsQuery = (
  { __typename?: 'Query' }
  & { groups: Array<(
    { __typename?: 'Group' }
    & GroupCardInfoFragment
  )> }
);

export type GroupByIdSlugQueryVariables = Exact<{
  id?: Maybe<Scalars['ID']>;
  slug?: Maybe<Scalars['String']>;
}>;


export type GroupByIdSlugQuery = (
  { __typename?: 'Query' }
  & { group?: Maybe<(
    { __typename?: 'Group' }
    & Pick<Group, 'description'>
    & { organizers?: Maybe<Array<(
      { __typename?: 'User' }
      & BasicProfileFragment
    )>>, events: Array<(
      { __typename?: 'Event' }
      & BasicEventDetailsFragment
    )>, categories: Array<(
      { __typename?: 'Category' }
      & BasicCategoryInfoFragment
    )> }
    & GroupCardInfoFragment
  )> }
);

export type UpdateGroupStatusMutationVariables = Exact<{
  input: UpdateGroupStatusInput;
}>;


export type UpdateGroupStatusMutation = (
  { __typename?: 'Mutation' }
  & { updateGroupStatus?: Maybe<(
    { __typename?: 'UpdateGroupStatusPayload' }
    & Pick<UpdateGroupStatusPayload, 'errors'>
    & { group?: Maybe<(
      { __typename?: 'Group' }
      & Pick<Group, 'id' | 'status'>
    )> }
  )> }
);

export type LoginModalVisibilityQueryVariables = Exact<{ [key: string]: never; }>;


export type LoginModalVisibilityQuery = (
  { __typename?: 'Query' }
  & Pick<Query, 'loginModalVisible'>
);

export type SignupModalVisibilityQueryVariables = Exact<{ [key: string]: never; }>;


export type SignupModalVisibilityQuery = (
  { __typename?: 'Query' }
  & Pick<Query, 'signupModalVisible'>
);

export type LoggedInStateQueryVariables = Exact<{ [key: string]: never; }>;


export type LoggedInStateQuery = (
  { __typename?: 'Query' }
  & Pick<Query, 'loggedInState'>
);

export type UserRoleQueryVariables = Exact<{ [key: string]: never; }>;


export type UserRoleQuery = (
  { __typename?: 'Query' }
  & Pick<Query, 'userRole'>
);

export type BasicProfileFragment = (
  { __typename?: 'User' }
  & Pick<User, 'id' | 'firstname' | 'lastname' | 'avatarUrl'>
);

export type FullProfileFragment = (
  { __typename?: 'User' }
  & Pick<User, 'email' | 'role' | 'status'>
  & BasicProfileFragment
);

export type GetAllUsersQueryVariables = Exact<{ [key: string]: never; }>;


export type GetAllUsersQuery = (
  { __typename?: 'Query' }
  & { users: Array<(
    { __typename?: 'User' }
    & FullProfileFragment
  )> }
);

export type GetMyAccountQueryVariables = Exact<{ [key: string]: never; }>;


export type GetMyAccountQuery = (
  { __typename?: 'Query' }
  & { myAccount?: Maybe<(
    { __typename?: 'User' }
    & { address?: Maybe<(
      { __typename?: 'Address' }
      & FullAddressFragment
    )>, groups?: Maybe<Array<(
      { __typename?: 'Group' }
      & Pick<Group, 'id' | 'name'>
    )>>, ledGroups?: Maybe<Array<(
      { __typename?: 'Group' }
      & Pick<Group, 'id' | 'name'>
    )>>, categories?: Maybe<Array<(
      { __typename?: 'Category' }
      & Pick<Category, 'id' | 'title'>
    )>> }
    & FullProfileFragment
  )> }
);

export type GetUserByIdQueryVariables = Exact<{
  id: Scalars['ID'];
}>;


export type GetUserByIdQuery = (
  { __typename?: 'Query' }
  & { user?: Maybe<(
    { __typename?: 'User' }
    & BasicProfileFragment
  )> }
);

export type UpdateUserStatusMutationVariables = Exact<{
  input: UpdateUserStatusInput;
}>;


export type UpdateUserStatusMutation = (
  { __typename?: 'Mutation' }
  & { updateUserStatus?: Maybe<(
    { __typename?: 'UpdateUserStatusPayload' }
    & Pick<UpdateUserStatusPayload, 'errors'>
    & { user?: Maybe<(
      { __typename?: 'User' }
      & Pick<User, 'id' | 'status'>
    )> }
  )> }
);

export type UpdateProfileMutationVariables = Exact<{
  input: UpdateProfileInput;
}>;


export type UpdateProfileMutation = (
  { __typename?: 'Mutation' }
  & { updateProfile?: Maybe<(
    { __typename?: 'UpdateProfilePayload' }
    & Pick<UpdateProfilePayload, 'errors'>
    & { user?: Maybe<(
      { __typename?: 'User' }
      & FullProfileFragment
    )> }
  )> }
);

export const BasicAddressFragmentDoc = gql`
    fragment basicAddress on Address {
  lat
  lng
  city
  address
}
    `;
export const FullAddressFragmentDoc = gql`
    fragment fullAddress on Address {
  country
  state
  zip
  ...basicAddress
}
    ${BasicAddressFragmentDoc}`;
export const BasicGroupDetailsFragmentDoc = gql`
    fragment basicGroupDetails on Group {
  id
  name
  slug
}
    `;
export const BasicEventDetailsFragmentDoc = gql`
    fragment basicEventDetails on Event {
  id
  title
  coverPhotoUrl
  startTime
  endTime
  address {
    ...basicAddress
  }
  group {
    ...basicGroupDetails
  }
}
    ${BasicAddressFragmentDoc}
${BasicGroupDetailsFragmentDoc}`;
export const BasicProfileFragmentDoc = gql`
    fragment basicProfile on User {
  id
  firstname
  lastname
  avatarUrl
}
    `;
export const BasicCategoryInfoFragmentDoc = gql`
    fragment basicCategoryInfo on Category {
  title
  description
}
    `;
export const GroupCardInfoFragmentDoc = gql`
    fragment groupCardInfo on Group {
  ...basicGroupDetails
  coverPhotoUrl
  status
  members {
    ...basicProfile
  }
  address {
    ...basicAddress
  }
  categories {
    ...basicCategoryInfo
  }
}
    ${BasicGroupDetailsFragmentDoc}
${BasicProfileFragmentDoc}
${BasicAddressFragmentDoc}
${BasicCategoryInfoFragmentDoc}`;
export const FullProfileFragmentDoc = gql`
    fragment fullProfile on User {
  ...basicProfile
  email
  role
  status
}
    ${BasicProfileFragmentDoc}`;
export const GetAllCategoriesDocument = gql`
    query GetAllCategories {
  categories {
    id
    slug
    coverPhotoUrl
    ...basicCategoryInfo
  }
}
    ${BasicCategoryInfoFragmentDoc}`;

/**
 * __useGetAllCategoriesQuery__
 *
 * To run a query within a React component, call `useGetAllCategoriesQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetAllCategoriesQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetAllCategoriesQuery({
 *   variables: {
 *   },
 * });
 */
export function useGetAllCategoriesQuery(baseOptions?: Apollo.QueryHookOptions<GetAllCategoriesQuery, GetAllCategoriesQueryVariables>) {
        return Apollo.useQuery<GetAllCategoriesQuery, GetAllCategoriesQueryVariables>(GetAllCategoriesDocument, baseOptions);
      }
export function useGetAllCategoriesLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetAllCategoriesQuery, GetAllCategoriesQueryVariables>) {
          return Apollo.useLazyQuery<GetAllCategoriesQuery, GetAllCategoriesQueryVariables>(GetAllCategoriesDocument, baseOptions);
        }
export type GetAllCategoriesQueryHookResult = ReturnType<typeof useGetAllCategoriesQuery>;
export type GetAllCategoriesLazyQueryHookResult = ReturnType<typeof useGetAllCategoriesLazyQuery>;
export type GetAllCategoriesQueryResult = Apollo.QueryResult<GetAllCategoriesQuery, GetAllCategoriesQueryVariables>;
export const GetAllEventsDocument = gql`
    query GetAllEvents {
  events {
    ...basicEventDetails
  }
}
    ${BasicEventDetailsFragmentDoc}`;

/**
 * __useGetAllEventsQuery__
 *
 * To run a query within a React component, call `useGetAllEventsQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetAllEventsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetAllEventsQuery({
 *   variables: {
 *   },
 * });
 */
export function useGetAllEventsQuery(baseOptions?: Apollo.QueryHookOptions<GetAllEventsQuery, GetAllEventsQueryVariables>) {
        return Apollo.useQuery<GetAllEventsQuery, GetAllEventsQueryVariables>(GetAllEventsDocument, baseOptions);
      }
export function useGetAllEventsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetAllEventsQuery, GetAllEventsQueryVariables>) {
          return Apollo.useLazyQuery<GetAllEventsQuery, GetAllEventsQueryVariables>(GetAllEventsDocument, baseOptions);
        }
export type GetAllEventsQueryHookResult = ReturnType<typeof useGetAllEventsQuery>;
export type GetAllEventsLazyQueryHookResult = ReturnType<typeof useGetAllEventsLazyQuery>;
export type GetAllEventsQueryResult = Apollo.QueryResult<GetAllEventsQuery, GetAllEventsQueryVariables>;
export const GetEventByIdDocument = gql`
    query GetEventById($id: ID) {
  event(id: $id) {
    ...basicEventDetails
    description
    photos {
      id
      url
    }
  }
}
    ${BasicEventDetailsFragmentDoc}`;

/**
 * __useGetEventByIdQuery__
 *
 * To run a query within a React component, call `useGetEventByIdQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetEventByIdQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetEventByIdQuery({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useGetEventByIdQuery(baseOptions?: Apollo.QueryHookOptions<GetEventByIdQuery, GetEventByIdQueryVariables>) {
        return Apollo.useQuery<GetEventByIdQuery, GetEventByIdQueryVariables>(GetEventByIdDocument, baseOptions);
      }
export function useGetEventByIdLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetEventByIdQuery, GetEventByIdQueryVariables>) {
          return Apollo.useLazyQuery<GetEventByIdQuery, GetEventByIdQueryVariables>(GetEventByIdDocument, baseOptions);
        }
export type GetEventByIdQueryHookResult = ReturnType<typeof useGetEventByIdQuery>;
export type GetEventByIdLazyQueryHookResult = ReturnType<typeof useGetEventByIdLazyQuery>;
export type GetEventByIdQueryResult = Apollo.QueryResult<GetEventByIdQuery, GetEventByIdQueryVariables>;
export const GetAllGroupsDocument = gql`
    query GetAllGroups {
  groups {
    ...groupCardInfo
  }
}
    ${GroupCardInfoFragmentDoc}`;

/**
 * __useGetAllGroupsQuery__
 *
 * To run a query within a React component, call `useGetAllGroupsQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetAllGroupsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetAllGroupsQuery({
 *   variables: {
 *   },
 * });
 */
export function useGetAllGroupsQuery(baseOptions?: Apollo.QueryHookOptions<GetAllGroupsQuery, GetAllGroupsQueryVariables>) {
        return Apollo.useQuery<GetAllGroupsQuery, GetAllGroupsQueryVariables>(GetAllGroupsDocument, baseOptions);
      }
export function useGetAllGroupsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetAllGroupsQuery, GetAllGroupsQueryVariables>) {
          return Apollo.useLazyQuery<GetAllGroupsQuery, GetAllGroupsQueryVariables>(GetAllGroupsDocument, baseOptions);
        }
export type GetAllGroupsQueryHookResult = ReturnType<typeof useGetAllGroupsQuery>;
export type GetAllGroupsLazyQueryHookResult = ReturnType<typeof useGetAllGroupsLazyQuery>;
export type GetAllGroupsQueryResult = Apollo.QueryResult<GetAllGroupsQuery, GetAllGroupsQueryVariables>;
export const GroupByIdSlugDocument = gql`
    query GroupByIdSlug($id: ID, $slug: String) {
  group(slug: $slug, id: $id) {
    ...groupCardInfo
    description
    organizers {
      ...basicProfile
    }
    events {
      ...basicEventDetails
    }
    categories {
      ...basicCategoryInfo
    }
  }
}
    ${GroupCardInfoFragmentDoc}
${BasicProfileFragmentDoc}
${BasicEventDetailsFragmentDoc}
${BasicCategoryInfoFragmentDoc}`;

/**
 * __useGroupByIdSlugQuery__
 *
 * To run a query within a React component, call `useGroupByIdSlugQuery` and pass it any options that fit your needs.
 * When your component renders, `useGroupByIdSlugQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGroupByIdSlugQuery({
 *   variables: {
 *      id: // value for 'id'
 *      slug: // value for 'slug'
 *   },
 * });
 */
export function useGroupByIdSlugQuery(baseOptions?: Apollo.QueryHookOptions<GroupByIdSlugQuery, GroupByIdSlugQueryVariables>) {
        return Apollo.useQuery<GroupByIdSlugQuery, GroupByIdSlugQueryVariables>(GroupByIdSlugDocument, baseOptions);
      }
export function useGroupByIdSlugLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GroupByIdSlugQuery, GroupByIdSlugQueryVariables>) {
          return Apollo.useLazyQuery<GroupByIdSlugQuery, GroupByIdSlugQueryVariables>(GroupByIdSlugDocument, baseOptions);
        }
export type GroupByIdSlugQueryHookResult = ReturnType<typeof useGroupByIdSlugQuery>;
export type GroupByIdSlugLazyQueryHookResult = ReturnType<typeof useGroupByIdSlugLazyQuery>;
export type GroupByIdSlugQueryResult = Apollo.QueryResult<GroupByIdSlugQuery, GroupByIdSlugQueryVariables>;
export const UpdateGroupStatusDocument = gql`
    mutation UpdateGroupStatus($input: UpdateGroupStatusInput!) {
  updateGroupStatus(input: $input) {
    errors
    group {
      id
      status
    }
  }
}
    `;
export type UpdateGroupStatusMutationFn = Apollo.MutationFunction<UpdateGroupStatusMutation, UpdateGroupStatusMutationVariables>;

/**
 * __useUpdateGroupStatusMutation__
 *
 * To run a mutation, you first call `useUpdateGroupStatusMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpdateGroupStatusMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [updateGroupStatusMutation, { data, loading, error }] = useUpdateGroupStatusMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useUpdateGroupStatusMutation(baseOptions?: Apollo.MutationHookOptions<UpdateGroupStatusMutation, UpdateGroupStatusMutationVariables>) {
        return Apollo.useMutation<UpdateGroupStatusMutation, UpdateGroupStatusMutationVariables>(UpdateGroupStatusDocument, baseOptions);
      }
export type UpdateGroupStatusMutationHookResult = ReturnType<typeof useUpdateGroupStatusMutation>;
export type UpdateGroupStatusMutationResult = Apollo.MutationResult<UpdateGroupStatusMutation>;
export type UpdateGroupStatusMutationOptions = Apollo.BaseMutationOptions<UpdateGroupStatusMutation, UpdateGroupStatusMutationVariables>;
export const LoginModalVisibilityDocument = gql`
    query LoginModalVisibility {
  loginModalVisible @client
}
    `;

/**
 * __useLoginModalVisibilityQuery__
 *
 * To run a query within a React component, call `useLoginModalVisibilityQuery` and pass it any options that fit your needs.
 * When your component renders, `useLoginModalVisibilityQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useLoginModalVisibilityQuery({
 *   variables: {
 *   },
 * });
 */
export function useLoginModalVisibilityQuery(baseOptions?: Apollo.QueryHookOptions<LoginModalVisibilityQuery, LoginModalVisibilityQueryVariables>) {
        return Apollo.useQuery<LoginModalVisibilityQuery, LoginModalVisibilityQueryVariables>(LoginModalVisibilityDocument, baseOptions);
      }
export function useLoginModalVisibilityLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<LoginModalVisibilityQuery, LoginModalVisibilityQueryVariables>) {
          return Apollo.useLazyQuery<LoginModalVisibilityQuery, LoginModalVisibilityQueryVariables>(LoginModalVisibilityDocument, baseOptions);
        }
export type LoginModalVisibilityQueryHookResult = ReturnType<typeof useLoginModalVisibilityQuery>;
export type LoginModalVisibilityLazyQueryHookResult = ReturnType<typeof useLoginModalVisibilityLazyQuery>;
export type LoginModalVisibilityQueryResult = Apollo.QueryResult<LoginModalVisibilityQuery, LoginModalVisibilityQueryVariables>;
export const SignupModalVisibilityDocument = gql`
    query SignupModalVisibility {
  signupModalVisible @client
}
    `;

/**
 * __useSignupModalVisibilityQuery__
 *
 * To run a query within a React component, call `useSignupModalVisibilityQuery` and pass it any options that fit your needs.
 * When your component renders, `useSignupModalVisibilityQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useSignupModalVisibilityQuery({
 *   variables: {
 *   },
 * });
 */
export function useSignupModalVisibilityQuery(baseOptions?: Apollo.QueryHookOptions<SignupModalVisibilityQuery, SignupModalVisibilityQueryVariables>) {
        return Apollo.useQuery<SignupModalVisibilityQuery, SignupModalVisibilityQueryVariables>(SignupModalVisibilityDocument, baseOptions);
      }
export function useSignupModalVisibilityLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<SignupModalVisibilityQuery, SignupModalVisibilityQueryVariables>) {
          return Apollo.useLazyQuery<SignupModalVisibilityQuery, SignupModalVisibilityQueryVariables>(SignupModalVisibilityDocument, baseOptions);
        }
export type SignupModalVisibilityQueryHookResult = ReturnType<typeof useSignupModalVisibilityQuery>;
export type SignupModalVisibilityLazyQueryHookResult = ReturnType<typeof useSignupModalVisibilityLazyQuery>;
export type SignupModalVisibilityQueryResult = Apollo.QueryResult<SignupModalVisibilityQuery, SignupModalVisibilityQueryVariables>;
export const LoggedInStateDocument = gql`
    query LoggedInState {
  loggedInState @client
}
    `;

/**
 * __useLoggedInStateQuery__
 *
 * To run a query within a React component, call `useLoggedInStateQuery` and pass it any options that fit your needs.
 * When your component renders, `useLoggedInStateQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useLoggedInStateQuery({
 *   variables: {
 *   },
 * });
 */
export function useLoggedInStateQuery(baseOptions?: Apollo.QueryHookOptions<LoggedInStateQuery, LoggedInStateQueryVariables>) {
        return Apollo.useQuery<LoggedInStateQuery, LoggedInStateQueryVariables>(LoggedInStateDocument, baseOptions);
      }
export function useLoggedInStateLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<LoggedInStateQuery, LoggedInStateQueryVariables>) {
          return Apollo.useLazyQuery<LoggedInStateQuery, LoggedInStateQueryVariables>(LoggedInStateDocument, baseOptions);
        }
export type LoggedInStateQueryHookResult = ReturnType<typeof useLoggedInStateQuery>;
export type LoggedInStateLazyQueryHookResult = ReturnType<typeof useLoggedInStateLazyQuery>;
export type LoggedInStateQueryResult = Apollo.QueryResult<LoggedInStateQuery, LoggedInStateQueryVariables>;
export const UserRoleDocument = gql`
    query UserRole {
  userRole @client
}
    `;

/**
 * __useUserRoleQuery__
 *
 * To run a query within a React component, call `useUserRoleQuery` and pass it any options that fit your needs.
 * When your component renders, `useUserRoleQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useUserRoleQuery({
 *   variables: {
 *   },
 * });
 */
export function useUserRoleQuery(baseOptions?: Apollo.QueryHookOptions<UserRoleQuery, UserRoleQueryVariables>) {
        return Apollo.useQuery<UserRoleQuery, UserRoleQueryVariables>(UserRoleDocument, baseOptions);
      }
export function useUserRoleLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<UserRoleQuery, UserRoleQueryVariables>) {
          return Apollo.useLazyQuery<UserRoleQuery, UserRoleQueryVariables>(UserRoleDocument, baseOptions);
        }
export type UserRoleQueryHookResult = ReturnType<typeof useUserRoleQuery>;
export type UserRoleLazyQueryHookResult = ReturnType<typeof useUserRoleLazyQuery>;
export type UserRoleQueryResult = Apollo.QueryResult<UserRoleQuery, UserRoleQueryVariables>;
export const GetAllUsersDocument = gql`
    query GetAllUsers {
  users {
    ...fullProfile
  }
}
    ${FullProfileFragmentDoc}`;

/**
 * __useGetAllUsersQuery__
 *
 * To run a query within a React component, call `useGetAllUsersQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetAllUsersQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetAllUsersQuery({
 *   variables: {
 *   },
 * });
 */
export function useGetAllUsersQuery(baseOptions?: Apollo.QueryHookOptions<GetAllUsersQuery, GetAllUsersQueryVariables>) {
        return Apollo.useQuery<GetAllUsersQuery, GetAllUsersQueryVariables>(GetAllUsersDocument, baseOptions);
      }
export function useGetAllUsersLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetAllUsersQuery, GetAllUsersQueryVariables>) {
          return Apollo.useLazyQuery<GetAllUsersQuery, GetAllUsersQueryVariables>(GetAllUsersDocument, baseOptions);
        }
export type GetAllUsersQueryHookResult = ReturnType<typeof useGetAllUsersQuery>;
export type GetAllUsersLazyQueryHookResult = ReturnType<typeof useGetAllUsersLazyQuery>;
export type GetAllUsersQueryResult = Apollo.QueryResult<GetAllUsersQuery, GetAllUsersQueryVariables>;
export const GetMyAccountDocument = gql`
    query GetMyAccount {
  myAccount {
    ...fullProfile
    address {
      ...fullAddress
    }
    groups {
      id
      name
    }
    ledGroups {
      id
      name
    }
    categories {
      id
      title
    }
  }
}
    ${FullProfileFragmentDoc}
${FullAddressFragmentDoc}`;

/**
 * __useGetMyAccountQuery__
 *
 * To run a query within a React component, call `useGetMyAccountQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetMyAccountQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetMyAccountQuery({
 *   variables: {
 *   },
 * });
 */
export function useGetMyAccountQuery(baseOptions?: Apollo.QueryHookOptions<GetMyAccountQuery, GetMyAccountQueryVariables>) {
        return Apollo.useQuery<GetMyAccountQuery, GetMyAccountQueryVariables>(GetMyAccountDocument, baseOptions);
      }
export function useGetMyAccountLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetMyAccountQuery, GetMyAccountQueryVariables>) {
          return Apollo.useLazyQuery<GetMyAccountQuery, GetMyAccountQueryVariables>(GetMyAccountDocument, baseOptions);
        }
export type GetMyAccountQueryHookResult = ReturnType<typeof useGetMyAccountQuery>;
export type GetMyAccountLazyQueryHookResult = ReturnType<typeof useGetMyAccountLazyQuery>;
export type GetMyAccountQueryResult = Apollo.QueryResult<GetMyAccountQuery, GetMyAccountQueryVariables>;
export const GetUserByIdDocument = gql`
    query GetUserById($id: ID!) {
  user(id: $id) {
    ...basicProfile
  }
}
    ${BasicProfileFragmentDoc}`;

/**
 * __useGetUserByIdQuery__
 *
 * To run a query within a React component, call `useGetUserByIdQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetUserByIdQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetUserByIdQuery({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useGetUserByIdQuery(baseOptions: Apollo.QueryHookOptions<GetUserByIdQuery, GetUserByIdQueryVariables>) {
        return Apollo.useQuery<GetUserByIdQuery, GetUserByIdQueryVariables>(GetUserByIdDocument, baseOptions);
      }
export function useGetUserByIdLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetUserByIdQuery, GetUserByIdQueryVariables>) {
          return Apollo.useLazyQuery<GetUserByIdQuery, GetUserByIdQueryVariables>(GetUserByIdDocument, baseOptions);
        }
export type GetUserByIdQueryHookResult = ReturnType<typeof useGetUserByIdQuery>;
export type GetUserByIdLazyQueryHookResult = ReturnType<typeof useGetUserByIdLazyQuery>;
export type GetUserByIdQueryResult = Apollo.QueryResult<GetUserByIdQuery, GetUserByIdQueryVariables>;
export const UpdateUserStatusDocument = gql`
    mutation UpdateUserStatus($input: UpdateUserStatusInput!) {
  updateUserStatus(input: $input) {
    errors
    user {
      id
      status
    }
  }
}
    `;
export type UpdateUserStatusMutationFn = Apollo.MutationFunction<UpdateUserStatusMutation, UpdateUserStatusMutationVariables>;

/**
 * __useUpdateUserStatusMutation__
 *
 * To run a mutation, you first call `useUpdateUserStatusMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpdateUserStatusMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [updateUserStatusMutation, { data, loading, error }] = useUpdateUserStatusMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useUpdateUserStatusMutation(baseOptions?: Apollo.MutationHookOptions<UpdateUserStatusMutation, UpdateUserStatusMutationVariables>) {
        return Apollo.useMutation<UpdateUserStatusMutation, UpdateUserStatusMutationVariables>(UpdateUserStatusDocument, baseOptions);
      }
export type UpdateUserStatusMutationHookResult = ReturnType<typeof useUpdateUserStatusMutation>;
export type UpdateUserStatusMutationResult = Apollo.MutationResult<UpdateUserStatusMutation>;
export type UpdateUserStatusMutationOptions = Apollo.BaseMutationOptions<UpdateUserStatusMutation, UpdateUserStatusMutationVariables>;
export const UpdateProfileDocument = gql`
    mutation UpdateProfile($input: UpdateProfileInput!) {
  updateProfile(input: $input) {
    errors
    user {
      ...fullProfile
    }
  }
}
    ${FullProfileFragmentDoc}`;
export type UpdateProfileMutationFn = Apollo.MutationFunction<UpdateProfileMutation, UpdateProfileMutationVariables>;

/**
 * __useUpdateProfileMutation__
 *
 * To run a mutation, you first call `useUpdateProfileMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpdateProfileMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [updateProfileMutation, { data, loading, error }] = useUpdateProfileMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useUpdateProfileMutation(baseOptions?: Apollo.MutationHookOptions<UpdateProfileMutation, UpdateProfileMutationVariables>) {
        return Apollo.useMutation<UpdateProfileMutation, UpdateProfileMutationVariables>(UpdateProfileDocument, baseOptions);
      }
export type UpdateProfileMutationHookResult = ReturnType<typeof useUpdateProfileMutation>;
export type UpdateProfileMutationResult = Apollo.MutationResult<UpdateProfileMutation>;
export type UpdateProfileMutationOptions = Apollo.BaseMutationOptions<UpdateProfileMutation, UpdateProfileMutationVariables>;